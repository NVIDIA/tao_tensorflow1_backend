# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: nvidia_tao_tf1/cv/makenet/proto/lr_config.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='nvidia_tao_tf1/cv/makenet/proto/lr_config.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n/nvidia_tao_tf1/cv/makenet/proto/lr_config.proto\"G\n\x0cStepLrConfig\x12\x15\n\rlearning_rate\x18\x01 \x01(\x02\x12\x11\n\tstep_size\x18\x02 \x01(\r\x12\r\n\x05gamma\x18\x03 \x01(\x02\"t\n\x12SoftAnnealLrConfig\x12\x15\n\rlearning_rate\x18\x01 \x01(\x02\x12\x12\n\nsoft_start\x18\x02 \x01(\x02\x12\x19\n\x11\x61nnealing_divider\x18\x03 \x01(\x02\x12\x18\n\x10\x61nnealing_points\x18\x07 \x03(\x02\"Q\n\x0e\x43osineLrConfig\x12\x15\n\rlearning_rate\x18\x01 \x01(\x02\x12\x14\n\x0cmin_lr_ratio\x18\x02 \x01(\x02\x12\x12\n\nsoft_start\x18\x03 \x01(\x02\"\x88\x01\n\x08LRConfig\x12\x1d\n\x04step\x18\x01 \x01(\x0b\x32\r.StepLrConfigH\x00\x12*\n\x0bsoft_anneal\x18\x02 \x01(\x0b\x32\x13.SoftAnnealLrConfigH\x00\x12!\n\x06\x63osine\x18\x03 \x01(\x0b\x32\x0f.CosineLrConfigH\x00\x42\x0e\n\x0clr_schedulerb\x06proto3')
)




_STEPLRCONFIG = _descriptor.Descriptor(
  name='StepLrConfig',
  full_name='StepLrConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='learning_rate', full_name='StepLrConfig.learning_rate', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='step_size', full_name='StepLrConfig.step_size', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='gamma', full_name='StepLrConfig.gamma', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=51,
  serialized_end=122,
)


_SOFTANNEALLRCONFIG = _descriptor.Descriptor(
  name='SoftAnnealLrConfig',
  full_name='SoftAnnealLrConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='learning_rate', full_name='SoftAnnealLrConfig.learning_rate', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='soft_start', full_name='SoftAnnealLrConfig.soft_start', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='annealing_divider', full_name='SoftAnnealLrConfig.annealing_divider', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='annealing_points', full_name='SoftAnnealLrConfig.annealing_points', index=3,
      number=7, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=124,
  serialized_end=240,
)


_COSINELRCONFIG = _descriptor.Descriptor(
  name='CosineLrConfig',
  full_name='CosineLrConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='learning_rate', full_name='CosineLrConfig.learning_rate', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='min_lr_ratio', full_name='CosineLrConfig.min_lr_ratio', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='soft_start', full_name='CosineLrConfig.soft_start', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=242,
  serialized_end=323,
)


_LRCONFIG = _descriptor.Descriptor(
  name='LRConfig',
  full_name='LRConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='step', full_name='LRConfig.step', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='soft_anneal', full_name='LRConfig.soft_anneal', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='cosine', full_name='LRConfig.cosine', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='lr_scheduler', full_name='LRConfig.lr_scheduler',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=326,
  serialized_end=462,
)

_LRCONFIG.fields_by_name['step'].message_type = _STEPLRCONFIG
_LRCONFIG.fields_by_name['soft_anneal'].message_type = _SOFTANNEALLRCONFIG
_LRCONFIG.fields_by_name['cosine'].message_type = _COSINELRCONFIG
_LRCONFIG.oneofs_by_name['lr_scheduler'].fields.append(
  _LRCONFIG.fields_by_name['step'])
_LRCONFIG.fields_by_name['step'].containing_oneof = _LRCONFIG.oneofs_by_name['lr_scheduler']
_LRCONFIG.oneofs_by_name['lr_scheduler'].fields.append(
  _LRCONFIG.fields_by_name['soft_anneal'])
_LRCONFIG.fields_by_name['soft_anneal'].containing_oneof = _LRCONFIG.oneofs_by_name['lr_scheduler']
_LRCONFIG.oneofs_by_name['lr_scheduler'].fields.append(
  _LRCONFIG.fields_by_name['cosine'])
_LRCONFIG.fields_by_name['cosine'].containing_oneof = _LRCONFIG.oneofs_by_name['lr_scheduler']
DESCRIPTOR.message_types_by_name['StepLrConfig'] = _STEPLRCONFIG
DESCRIPTOR.message_types_by_name['SoftAnnealLrConfig'] = _SOFTANNEALLRCONFIG
DESCRIPTOR.message_types_by_name['CosineLrConfig'] = _COSINELRCONFIG
DESCRIPTOR.message_types_by_name['LRConfig'] = _LRCONFIG
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

StepLrConfig = _reflection.GeneratedProtocolMessageType('StepLrConfig', (_message.Message,), dict(
  DESCRIPTOR = _STEPLRCONFIG,
  __module__ = 'nvidia_tao_tf1.cv.makenet.proto.lr_config_pb2'
  # @@protoc_insertion_point(class_scope:StepLrConfig)
  ))
_sym_db.RegisterMessage(StepLrConfig)

SoftAnnealLrConfig = _reflection.GeneratedProtocolMessageType('SoftAnnealLrConfig', (_message.Message,), dict(
  DESCRIPTOR = _SOFTANNEALLRCONFIG,
  __module__ = 'nvidia_tao_tf1.cv.makenet.proto.lr_config_pb2'
  # @@protoc_insertion_point(class_scope:SoftAnnealLrConfig)
  ))
_sym_db.RegisterMessage(SoftAnnealLrConfig)

CosineLrConfig = _reflection.GeneratedProtocolMessageType('CosineLrConfig', (_message.Message,), dict(
  DESCRIPTOR = _COSINELRCONFIG,
  __module__ = 'nvidia_tao_tf1.cv.makenet.proto.lr_config_pb2'
  # @@protoc_insertion_point(class_scope:CosineLrConfig)
  ))
_sym_db.RegisterMessage(CosineLrConfig)

LRConfig = _reflection.GeneratedProtocolMessageType('LRConfig', (_message.Message,), dict(
  DESCRIPTOR = _LRCONFIG,
  __module__ = 'nvidia_tao_tf1.cv.makenet.proto.lr_config_pb2'
  # @@protoc_insertion_point(class_scope:LRConfig)
  ))
_sym_db.RegisterMessage(LRConfig)


# @@protoc_insertion_point(module_scope)
